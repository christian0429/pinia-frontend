Vue.js에서는 UI를 구성하기 위해 템플릿(template)과 렌더 함수(render function) 코드를 사용합니다.
이 두 가지 방법은 가상 DOM 트리를 생성하고 최종적으로 실제 DOM에 반영됩니다.
또한 Vue.js는 컴포넌트 기반 아키텍처를 기반으로 하며, 이러한 컴포넌트는 반응형 상태를 가질 수 있습니다.

템플릿(Template):
Vue.js에서는 HTML 기반의 템플릿 문법을 사용하여 UI를 정의합니다.
이 템플릿은 Vue 인스턴스에 연결되어 해당 인스턴스의 데이터와 함께 동적으로 렌더링됩니다.
템플릿은 보통 Vue 컴포넌트 내에 정의되며, HTML과 Vue의 디렉티브(v-directive)를 함께 사용하여 데이터와 UI를 바인딩합니다.

렌더 함수(Render Function) 코드:
렌더 함수는 JavaScript 함수로서, 가상 DOM(Virtual DOM)을 생성하는 역할을 합니다.
Vue.js에서 컴포넌트를 정의할 때 렌더 함수를 사용하여 컴포넌트의 모양을 결정합니다.
렌더 함수를 사용하면 템플릿보다 더 프로그래밍적인 방식으로 UI를 생성할 수 있습니다.

가상 DOM(Virtual DOM) 트리:
Vue.js는 가상 DOM을 사용하여 실제 DOM 조작을 최소화하고 성능을 향상시킵니다.
가상 DOM은 실제 DOM의 가벼운 복제본으로,
Vue 컴포넌트의 상태 변화를 추적하고 실제 DOM에 패치(patch)하는 데 사용됩니다.
이를 통해 효율적인 UI 업데이트가 가능하며, 렌더링 성능이 향상됩니다.

실제 DOM:
가상 DOM의 변경 내용이 반영된 후에는 실제 DOM에 이를 적용하여 화면에 최종적인 결과물을 렌더링합니다.
Vue.js는 가상 DOM을 사용하여 실제 DOM을 최소화하고 브라우저에서의 렌더링 횟수를 최적화합니다.

컴포넌트 반응형 상태:
Vue.js의 핵심 기능 중 하나는 반응형 상태(Reactive State)입니다.
Vue 컴포넌트는 데이터와 UI 간의 양방향 바인딩을 제공하며, 데이터가 변경될 때 UI가 자동으로 업데이트됩니다.
이는 Vue.js의 반응형 시스템이 컴포넌트의 데이터를 추적하고 변경을 감지하여 필요한 업데이트를 수행하기 때문에 가능합니다.